#include "ooo_cpu.h"
#include <bitset>
#include <time.h>


#define BIMODAL_CTR_MAX 3
#define BIMODAL_CTR_INIT 2
#define TAGPRED_CTR_MAX 7
#define TAGPRED_CTR_INIT 0
#define BIMODALBITS 14
#define NUMTAGTABLES 4
#define TAGPREDBITS 12

#define LOOP_TABLE_SIZE   7   //2^7 entries
#define LOOP_TAG_SIZE     14  //14 bit tag
#define LOOP_CONF_MAX     3   //2 bit confidence 
#define LOOP_IT_MAX       14  //2^14 max iteration count
#define LOOP_AGE_MAX      5   //the highest possible age = 2^age_max
// #define 

#define TAKEN 1
#define NOT_TAKEN 0

struct TagEntry
{
    uint32_t ctr;
    uint32_t tag;
    uint32_t u;
};

typedef struct loopval{
	uint32_t loopCount;     //loop count?
	uint32_t currentIter;   //current iteration of the loop
	uint32_t tag;           //n bit tag 
	uint32_t conf;          //2 bit confidence counter
	uint32_t age;
	bool pred;
	bool used;
} LoopEntry;


struct CompressedHist
{
    uint32_t geo_length;
    uint32_t comp_length;
    uint32_t comp_hist;
};

bitset<131> global_hist;
uint32_t pattern_hist;

uint32_t *bimodal;
uint32_t bimodal_entries;
TagEntry *tagPred[NUMTAGTABLES];
LoopEntry *loopTable;
uint32_t loopTableSize;

uint32_t tag_pred_entries;
uint32_t geo_lengths[NUMTAGTABLES] = {130, 44, 15, 5};
CompressedHist comp_index[NUMTAGTABLES];
CompressedHist comp_tag[2][NUMTAGTABLES];

uint32_t indexTagPred[NUMTAGTABLES];
uint32_t tag[NUMTAGTABLES];
uint32_t timestamp;
uint32_t timestamp_flip;
uint32_t altBetterCount;

bool primePred;
bool altPred;
uint32_t primeBank;
uint32_t altBank;

uint32_t SatIncrement(uint32_t &num, uint32_t max)
{
    if (num < max)
        num++;
    return num;
}

uint32_t SatDecrement(uint32_t &num)
{
    if (num > 0)
        num--;
    return num;
}

void updateCompHist(CompressedHist *X, bitset<131> global_hist)
{
    uint32_t mask = (1 << X->comp_length) - 1;
    uint32_t mask1 = global_hist[X->geo_length] << (X->geo_length % X->comp_length);
    uint32_t mask2 = (1 << X->comp_length);
    X->comp_hist = (X->comp_hist << 1) + global_hist[0];
    X->comp_hist ^= ((X->comp_hist & mask2) >> X->comp_length);
    X->comp_hist ^= mask1;
    X->comp_hist &= mask;
}

void O3_CPU::initialize_branch_predictor(void)
{
    bimodal_entries = (1 << BIMODALBITS);
    bimodal = new uint32_t[bimodal_entries];

    for (uint32_t i = 0; i < bimodal_entries; i++)
    {
        bimodal[i] = 2;
    }

    tag_pred_entries = (1 << TAGPREDBITS);

    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {
        tagPred[i] = new TagEntry[tag_pred_entries];
        for (uint32_t j = 0; j < tag_pred_entries; j++)
        {
            tagPred[i][j].ctr = 0;
            tagPred[i][j].tag = 0;
            tagPred[i][j].u = 0;
        }

        comp_index[i].comp_hist = 0;
        comp_index[i].geo_length = geo_lengths[i];
        comp_index[i].comp_length = TAGPREDBITS;
    }

    for (uint32_t j = 0; j < 2; j++)
    {
        for (uint32_t i = 0; i < NUMTAGTABLES; i++)
        {
            comp_tag[j][i].comp_hist = 0;
            comp_tag[j][i].geo_length = geo_lengths[i];

            if (j == 0)
            {
                comp_tag[j][i].comp_length = 9;
            }
            else
            {
                comp_tag[j][i].comp_length = 8;
            }
        }
    }

    loopTableSize = (1<<LOOP_TABLE_SIZE);
	loopTable = new LoopEntry[loopTableSize];
	for(uint32_t i = 0; i<loopTableSize; i++){
		loopTable[i].loopCount = 0;
		loopTable[i].currentIter = 0;
		loopTable[i].tag = 0;
		loopTable[i].conf = 0;
		loopTable[i].age = 0;
		loopTable[i].pred = false;
		loopTable[i].used = false;
	}

    primePred = -1;
    altPred = -1;
    primeBank = NUMTAGTABLES;
    altBank = NUMTAGTABLES;

    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {
        indexTagPred[i] = 0;
    }
    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {
        tag[i] = 0;
    }
    timestamp = 0;
    timestamp_flip = 1;
    altBetterCount = 8;

    global_hist.reset();
    pattern_hist = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t PC)
{
    bool basePrediction;
    uint32_t bimodalIndex = (PC) % (bimodal_entries);
    uint32_t bimodalCounter = bimodal[bimodalIndex];

    uint32_t loopIndex = (PC) % (loopTableSize);  	
	
	//check loop counter
	uint32_t loopTag = (PC) % (1<<LOOP_TAG_SIZE);

	if(loopTable[loopIndex].tag == loopTag &&
	   loopTable[loopIndex].currentIter < loopTable[loopIndex].loopCount){ //if the loop is executing
		loopTable[loopIndex].pred = TAKEN;
	} else if(loopTable[loopIndex].tag == loopTag &&
		  loopTable[loopIndex].currentIter == loopTable[loopIndex].loopCount) { //if loop is over
		loopTable[loopIndex].pred = NOT_TAKEN;
	} 
	if(loopTable[loopIndex].tag == loopTag &&
	   loopTable[loopIndex].conf == LOOP_CONF_MAX) { //if loop predictor is confident
		loopTable[loopIndex].used = true;       //use and return
		return loopTable[loopIndex].pred;
	}
	//if prediction hasn't been made, used = false
	loopTable[loopIndex].used = false;

    // use TAGE instead 

    if (bimodalCounter > BIMODAL_CTR_MAX / 2)
    {
        basePrediction = 1;
    }
    else
    {
        basePrediction = 0;
    }

    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {
        tag[i] = PC ^ comp_tag[0][i].comp_hist ^ (comp_tag[1][i].comp_hist << 1);
    }
    tag[0] &= ((1 << 9) - 1);
    tag[1] &= ((1 << 9) - 1);
    tag[2] &= ((1 << 9) - 1);
    tag[3] &= ((1 << 9) - 1);

    uint32_t index_mask = ((1 << TAGPREDBITS) - 1);

    indexTagPred[0] = PC ^ (PC >> TAGPREDBITS) ^ comp_index[0].comp_hist ^ pattern_hist ^ (pattern_hist >> TAGPREDBITS);
    indexTagPred[1] = PC ^ (PC >> (TAGPREDBITS - 1)) ^ comp_index[1].comp_hist ^ (pattern_hist);
    indexTagPred[2] = PC ^ (PC >> (TAGPREDBITS - 2)) ^ comp_index[2].comp_hist ^ (pattern_hist & 31);
    indexTagPred[3] = PC ^ (PC >> (TAGPREDBITS - 3)) ^ comp_index[3].comp_hist ^ (pattern_hist & 7);
    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {
        indexTagPred[i] = indexTagPred[i] & index_mask;
    }

    primePred = -1;
    altPred = -1;
    primeBank = NUMTAGTABLES;
    altBank = NUMTAGTABLES;

    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {

        if (tagPred[i][indexTagPred[i]].tag == tag[i])
        {
            primeBank = i;
            break;
        }
    }
    for (uint32_t i = primeBank + 1; i < NUMTAGTABLES; i++)
    {
        if (tagPred[i][indexTagPred[i]].tag == tag[i])
        {
            altBank = i;
            break;
        }
    }

    if (primeBank < NUMTAGTABLES)
    {
        if (altBank == NUMTAGTABLES)
        {
            altPred = basePrediction;
        }
        else
        {
            if (tagPred[altBank][indexTagPred[altBank]].ctr >= TAGPRED_CTR_MAX / 2)
                altPred = TAKEN;
            else
                altPred = NOT_TAKEN;
        }

        if ((tagPred[primeBank][indexTagPred[primeBank]].ctr != 3) || (tagPred[primeBank][indexTagPred[primeBank]].ctr != 4) || (tagPred[primeBank][indexTagPred[primeBank]].u != 0) || (altBetterCount < 8))
        {
            if (tagPred[primeBank][indexTagPred[primeBank]].ctr >= TAGPRED_CTR_MAX / 2)
                primePred = TAKEN;
            else
                primePred = NOT_TAKEN;
            return primePred;
        }
        else
        {
            return altPred;
        }
    }
    else
    {
        altPred = basePrediction;
        return altPred;
    }
}

void O3_CPU::last_branch_result(uint64_t PC, uint8_t taken)
{
    bool strong_old_present = false;
    bool new_entry = 0;
    bool resolveDir = (bool)taken;
    bool predDir = predict_branch(PC);

    uint32_t loopIndex = (PC) % (loopTableSize);
	uint32_t loopTag = (PC) & (1<<LOOP_TAG_SIZE);
	//update loop perdictor
	if(loopTable[loopIndex].tag != loopTag && loopTable[loopIndex].age > 0){ //if tag miss
		--(loopTable[loopIndex].age); //decrease age
	} else { //if tag hit:
		if(loopTable[loopIndex].age == 0){ //if entry is old or blank
			//initialize a new entry
			loopTable[loopIndex].tag = (PC) % (1<<LOOP_TAG_SIZE);
			loopTable[loopIndex].age = (1<<LOOP_AGE_MAX) + 1;
			loopTable[loopIndex].currentIter = 1;
			loopTable[loopIndex].loopCount = (1<<LOOP_IT_MAX); 
			loopTable[loopIndex].conf = 0;
			loopTable[loopIndex].pred = 0;
		} else {
			if(loopTable[loopIndex].pred == resolveDir) { //prediction was correct
				if(loopTable[loopIndex].currentIter != loopTable[loopIndex].loopCount){
					++(loopTable[loopIndex].currentIter);
				} else if(loopTable[loopIndex].currentIter == loopTable[loopIndex].loopCount){
					loopTable[loopIndex].currentIter = 0;
					if(loopTable[loopIndex].conf < LOOP_CONF_MAX)
						++(loopTable[loopIndex].conf);
				}
			} else { //prediction was incorrect
				if(loopTable[loopIndex].age == (1<<LOOP_AGE_MAX)) { 
					loopTable[loopIndex].loopCount = loopTable[loopIndex].currentIter;
					loopTable[loopIndex].currentIter = 0;
					loopTable[loopIndex].conf = 1;
				} else {
					loopTable[loopIndex].loopCount = 0;
					loopTable[loopIndex].currentIter = 0;
					loopTable[loopIndex].tag = 0;
					loopTable[loopIndex].conf = 0;
					loopTable[loopIndex].age = 0;
					loopTable[loopIndex].pred = false;
				}
			}
		}
		if(loopTable[loopIndex].used){
			return;
		}
	}

    if (primeBank < NUMTAGTABLES)
    {
        // As per update policy
        // 1st update the useful counter
        if ((predDir != altPred))
        {

            if (predDir == resolveDir)
            {

                tagPred[primeBank][indexTagPred[primeBank]].u = SatIncrement(tagPred[primeBank][indexTagPred[primeBank]].u, BIMODAL_CTR_MAX);
            }
            else
            {
                tagPred[primeBank][indexTagPred[primeBank]].u = SatDecrement(tagPred[primeBank][indexTagPred[primeBank]].u);
            }
        }
        // 2nd update the counters which provided the prediction
        if (resolveDir)
        {
            tagPred[primeBank][indexTagPred[primeBank]].ctr = SatIncrement(tagPred[primeBank][indexTagPred[primeBank]].ctr, TAGPRED_CTR_MAX);
        }
        else
        {
            tagPred[primeBank][indexTagPred[primeBank]].ctr = SatDecrement(tagPred[primeBank][indexTagPred[primeBank]].ctr);
        }
    }
    else
    {
        uint32_t bimodalIndex = (PC) % (bimodal_entries);
        if (resolveDir)
        {
            bimodal[bimodalIndex] = SatIncrement(bimodal[bimodalIndex], BIMODAL_CTR_MAX);
        }
        else
        {
            bimodal[bimodalIndex] = SatDecrement(bimodal[bimodalIndex]);
        }
    }
    if (primeBank < NUMTAGTABLES)
    {

        if ((tagPred[primeBank][indexTagPred[primeBank]].u == 0) && ((tagPred[primeBank][indexTagPred[primeBank]].ctr == 3) || (tagPred[primeBank][indexTagPred[primeBank]].ctr == 4)))
        {
            new_entry = true;

            if (primePred != altPred)
            {
                if (altPred == resolveDir)
                {
                    // Alternate prediction more useful is a counter to be of 4 bits
                    if (altBetterCount < 15)
                    {
                        altBetterCount++;
                    }
                }

                else if (altBetterCount > 0)
                {
                    altBetterCount--;
                }
            }
        }
    }

    // Proceeding to allocation of the entry.
    if ((!new_entry) || (new_entry && (primePred != resolveDir)))
    {
        if (((predDir != resolveDir) & (primeBank > 0)))
        {

            for (uint32_t i = 0; i < primeBank; i++)
            {
                if (tagPred[i][indexTagPred[i]].u == 0)
                    ;
                strong_old_present = true;
            }
            // If no entry useful than decrease useful bits of all entries but do not allocate
            if (strong_old_present == false)
            {
                for (uint32_t i = primeBank - 1; i >= 0; i--)
                {
                    tagPred[i][indexTagPred[i]].u--;
                }
            }
            else
            {

                srand(time(NULL));
                uint32_t randNo = rand() % 100;
                uint32_t count = 0;
                int bank_store[NUMTAGTABLES - 1] = {-1, -1, -1};
                int matchBank = 0;
                for (uint32_t i = 0; i < primeBank; i++)
                {
                    if (tagPred[i][indexTagPred[i]].u == 0)
                    {
                        count++;
                        bank_store[i] = i;
                    }
                }
                if (count == 1)
                {
                    matchBank = bank_store[0];
                }
                else if (count > 1)
                {
                    if (randNo > 33 && randNo <= 99)
                    {
                        matchBank = bank_store[(count - 1)];
                    }
                    else
                    {
                        matchBank = bank_store[(count - 2)];
                    }
                }

                for (int i = matchBank; i > -1; i--)
                {
                    if ((tagPred[i][indexTagPred[i]].u == 0))
                    {
                        if (resolveDir)
                        {
                            tagPred[i][indexTagPred[i]].ctr = 4;
                        }
                        else
                        {
                            tagPred[i][indexTagPred[i]].ctr = 3;
                        }
                        tagPred[i][indexTagPred[i]].tag = tag[i];
                        tagPred[i][indexTagPred[i]].u = 0;
                        break; // Only 1 entry allocated
                    }
                }
            }
        }
    }

    // Periodic Useful bit Reset Logic ( Important so as to optimize compared to PPM paper)
    timestamp++;
    // for every 256 K instruction 1st MSB than LSB
    if (timestamp == (256 * 1024))
    {
        // reset timestamp
        timestamp = 0;
        if (timestamp_flip == 1)
        {
            // this is the 1st time
            timestamp_flip = 0;
        }
        else
        {
            timestamp_flip = 1;
        }
        if (timestamp_flip == 1)
        { // MSB turn
            for (uint32_t j = 0; j < NUMTAGTABLES; j++)
            {
                for (uint32_t i = 0; i < tag_pred_entries; i++)
                {
                    tagPred[j][i].u = tagPred[j][i].u & 1;
                }
            }
        }
        else
        { // LSB turn
            for (uint32_t j = 0; j < NUMTAGTABLES; j++)
            {
                for (uint32_t i = 0; i < tag_pred_entries; i++)
                {
                    tagPred[j][i].u = tagPred[j][i].u & 2;
                }
            }
        }
    }

    // update the global_hist
    global_hist = (global_hist << 1);

    if (resolveDir == TAKEN)
    {
        global_hist.set(0, 1);
    }

    for (uint32_t i = 0; i < NUMTAGTABLES; i++)
    {

        updateCompHist(&comp_index[i], global_hist);
        updateCompHist(&comp_tag[0][i], global_hist);
        updateCompHist(&comp_tag[1][i], global_hist);
    }
    // pattern_hist update is simple, jus take the last bit ??
    // Always Limited to 16 bits as per paper.
    pattern_hist = (pattern_hist << 1);
    if (PC & 1)
    {
        pattern_hist = pattern_hist + 1;
    }
    pattern_hist = (pattern_hist & ((1 << 16) - 1));
}
